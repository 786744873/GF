@using System.Data;
@using CommonService.Common;
@model IEnumerable<CommonService.Model.CustomerForm.F_FormProperty>
@{
    Layout = "~/Views/Shared/_EditDialogFormTemplate.cshtml";//带表单提交的编辑页面固定模板
}
@{
    ViewBag.Title = "主子结构表单";
}
@section HeadCss{
    <style type="text/css">
        .tabAdd {
            clear: both;
            width: 100%;
            border-bottom: solid 1px #d0dee5;
            line-height: 35px;
            position: relative;
            height: 35px;
            margin-bottom: 18px;
            margin-top: 20px;
        }
            .tabAdd span {
                font-weight: bold;
                font-size: 14px;
                border-bottom: solid 3px #66c9f3;
                float: left;
                position: absolute;
                z-index: 100;
                bottom: -1px;
                padding: 0 3px;
                height: 30px;
                line-height: 30px;
                cursor: pointer;
                background: #7ccafe;
                padding-left: 10px;
                padding-right: 10px;
            }
                .tabAdd span a {
                    color: #fff;
                }
        .tableedit {
        }
        .tableedit tbody td {
                text-indent: 0px;
        }
        .tableedit tbody tr {
                border: solid 1px #cbcbcb;
        }
        .itemtext {
            float: left;
            display: block;
            width: 240px;
            margin: 0;
            padding: 5px;
        }
        .itemtext i {
                color: red;
                padding-left: 0px;
                font-style: normal;
                font-size: 12px;
                color: red;
                margin-left: 0px;
                display: inline-block;
                min-width: 220px;
        }
       .itemtext input[type=text], select {
                float: left;
                width: 220px;
                height: 24px;
                line-height: 24px;
                border-top: solid 1px #a7b5bc;
                border-left: solid 1px #a7b5bc;
                border-right: solid 1px #ced9df;
                border-bottom: solid 1px #ced9df;
                /*background: url(../images/inputbg.gif) repeat-x;*/
                text-indent: 5px;
       }
      .itemtext textarea {
                float: left;
                border-top: solid 1px #a7b5bc;
                border-left: solid 1px #a7b5bc;
                border-right: solid 1px #ced9df;
                border-bottom: solid 1px #ced9df;
                /*background: url(../images/inputbg.gif) repeat;*/
                text-indent: 5px;
                width: 220px;
                height: 40px;
                line-height: 20px;
                overflow: auto;
       }
      .itemtext input[type=radio] {
                float: left;
                height: 24px;
                line-height: 24px;
        }
      .itemtext span {
                float: left;
                padding: 0px 5px;
                line-height: 21px;
       }
      .itemtext input[type=checkbox] {
                float: left;
                height: 24px;
                line-height: 24px;
       }
     .bt {
            padding-top: 20px;
       }
     .tablelink {
            width: 50px;
            display: inline-block;
            text-align: center;
        }
    </style>
}
@section HeadScript{
<script type="text/javascript" src="/theme/js/customerform.js"></script>
    <script type="text/javascript">
        //切换被保全人时，重新赋值列表中被保全人下拉默认被保全人
        function changeBbqr() {            
 
        }
        //创建列表行之前
        function checkIsSelectBbqr() {
            if ($('#virtualField_bBqr').val() == "-2") {
                alertMsg.warn('请先选择一个被保全人！');
                return false;
            }
            return true;
        }
        //创建列表行之后
        function setDefaultBbqr(addRow) {
            addRow.find('select[bbqr=bbqr]').val($('#virtualField_bBqr').val());//根据当前下拉选择被保全人，重新赋值列表中的被保全人
        }
        //资产下拉框改变
        function changeZc() {
            $('div[tablegroup=tablegroup]').hide();//先关闭所有table容器
            if ($('#virtualField_assetsType').val() != "-2") {
                $('#table_container_' + $('#virtualField_assetsType').val()).show();//打开当前选中容器
            }
        }
    </script>
}
@{
    List<CommonService.Model.CustomerForm.F_FormProperty> EditFormPropertys = ViewBag.EditFormPropertys;//表单头编辑属性及其属性值
    DataSet DynamicItemFormPropertyValues = ViewBag.DynamicItemFormPropertyValues;//动态明细表单属性值
    CommonService.Model.CustomerForm.F_Form formcon = ViewBag.formCon;

    bool isHasSaveFormPower = ViewBag.IsHasSaveFormPower;
    bool isSwitchFormHistoryRecordUrl = ViewBag.IsSwitchFormHistoryRecordUrl;
    string fFormCode = ViewBag.FormCode; //ERP表单Guid
    string businessFlowCode = ViewBag.BusinessFlowCode;//业务流程Guid
    string businessFlowFormCode = ViewBag.BusinessFlowFormCode;//业务流程表单关联Guid
    int formStatus = ViewBag.FormStatus;//表单状态
    string fkType = ViewBag.FkType;//流程类型(商机或案件类型)
    string pkCode = ViewBag.PkCode;//商机guid或者案件guid
}
@{
    var itemGourp = Model.Where(p => p.F_FormProperty_uiType == Convert.ToInt32(UiControlType.普通子表));//明细组(有多少个明细子表)
}
@if (!isHasSaveFormPower)
{//没有保存权限，加入蒙版
    @*<div class="outer_wrapper_show"></div>*@
}

<div class="formbody">
    @{
        string relname = String.Empty;
        string name = String.Empty;
        string propertyValue = String.Empty;//属性值
        string propertyId = String.Empty;//属性id
        string tempPropertyValue = String.Empty;//临时属性值
        string propertyTime = String.Empty;
        string htmlAttributes = String.Empty;
        string htmlcontent = String.Empty;
    }
    <form action="/CustomerForm/FormPropertyValue/SaveHeadItems" id="formHeadItemsForm" method="post" onsubmit="return validateCallback(this,dialogAjaxDone);">
        <ul class="forminfo">
    @{
        @Html.Hidden("fFormCode", fFormCode);
        @Html.Hidden("businessFlowCode", businessFlowCode);
        @Html.Hidden("businessFlowFormCode", businessFlowFormCode);
        @Html.Hidden("fkType", fkType);
                                              foreach (var group in itemGourp)
                                              {
                                                  int childItemNum = Model.Where(p => p.F_FormProperty_parent == group.F_FormProperty_code).Count();//子属性数量
                                                  string itemGroupValue = group.F_FormProperty_code + "_" + childItemNum;
                                                <input type="hidden" name="itemGroup_@group.F_FormProperty_code" value="@itemGroupValue" />
                                              }
                                              foreach (var item in EditFormPropertys)
                                              {
                                                  if (!item.F_FormProperty_isShow)
                                                  {
                                                    <input type="hidden" id="formproperty_@item.V_FormPropertyValue_Code" name="formproperty_@item.V_FormPropertyValue_Code" value="@item.V_FormPropertyValue_Value" />
                                                      continue;
                                                  }
                                                  htmlAttributes = String.Empty;
                                                  propertyTime = String.Empty;
                                                  if (item.F_FormProperty_isRequire)
                                                  {
                                                      htmlAttributes += "requiredInput=请输入" + item.F_FormProperty_showName + "！ ";
                                                  }
                                                  if (item.F_FormProperty_isOnlyRead)
                                                  {
                                                      htmlAttributes += "readonly=readonly ";
                                                  }
                                                  //处理其它验证
                                                  string otherValidateStr = item.F_FormProperty_validationMessage;
                                                  if (!String.IsNullOrEmpty(otherValidateStr))
                                                  {
                                                      string[] validateMessageGroup = otherValidateStr.Split('|');
                                                      for (int i = 0; i < validateMessageGroup.Length; i++)
                                                      {
                                                          htmlAttributes += validateMessageGroup[i].Replace("\"", "") + " ";//替换验证信息中存在的双引号
                                                      }
                                                  }
                                                  htmlAttributes += "maxlength=" + item.F_FormProperty_fieldLength + " ";

                                                  switch (item.F_FormProperty_uiType.Value)
                                                  {
                                                      case 129://单行文本框
                                                          if (item.F_FormProperty_fieldName.ToString() == "rwmc" && string.IsNullOrEmpty(item.V_FormPropertyValue_Value))
                                                          {
                                                            <div class="mulitytext"><label>@item.F_FormProperty_showName</label><input id="formproperty_@item.V_FormPropertyValue_Code" name="formproperty_@item.V_FormPropertyValue_Code" type="text" @htmlAttributes value="@formcon.F_Form_chineseName"><i></i></div>
                                                          }
                                                          else
                                                          {
                                                            <div class="mulitytext"><label>@item.F_FormProperty_showName</label><input id="formproperty_@item.V_FormPropertyValue_Code" name="formproperty_@item.V_FormPropertyValue_Code" type="text" @htmlAttributes value="@item.V_FormPropertyValue_Value"><i></i></div>
                                                          }
                                                          break;
                                                      case 130://多行文本框
                                                    <div class="mulitytextarealonger"><label>@item.F_FormProperty_showName</label><textarea id="formproperty_@item.V_FormPropertyValue_Code" name="formproperty_@item.V_FormPropertyValue_Code" rows="2" cols="20" @htmlAttributes>@item.V_FormPropertyValue_Value</textarea><i></i></div>
                                                          break;
                                                      case 131://单选框
                                                    <div class="mulitytext"><label>@item.F_FormProperty_showName</label>@{Html.RenderAction("GenerateRadio", new { formPropertyValue = @item });}<i></i></div>
                                                    break;
                                                      case 132://复选框
                                                    if (!String.IsNullOrEmpty(item.F_FormProperty_dataSource))
                                                    {
                                                        <div class="mulitytext"><label>@item.F_FormProperty_showName</label>@{Html.RenderAction("GenerateCheckbox", new { formPropertyValue = @item });}<i></i></div>
                                                    }
                                                    else
                                                    {//这种情况只能存放一个布尔型的值：1或者0
                                                        if (String.IsNullOrEmpty(item.V_FormPropertyValue_Value))
                                                        {
                                                            <div class="mulitytext"><label>@item.F_FormProperty_showName</label><input name="formproperty_@item.V_FormPropertyValue_Code" value="0" type="checkbox" /><i></i></div>
                                                        }
                                                        else
                                                        {
                                                            <div class="mulitytext"><label>@item.F_FormProperty_showName</label><input name="formproperty_@item.V_FormPropertyValue_Code" value="1" type="checkbox" /><i></i></div>
                                                        }
                                                    }
                                                    break;
                                                      case 133://下拉框
                                                    <div class="mulitytext"><label>@item.F_FormProperty_showName</label>@{Html.RenderAction("GenerateDropDownList", new { formPropertyValue = @item });}<i></i></div>
                                                    break;
                                                      case 134://日期框
                                                    htmlAttributes += "date=date dateformat=yyyy-MM-dd ";
                                                    if (!String.IsNullOrEmpty(item.V_FormPropertyValue_Value))
                                                    {
                                                        propertyTime = DateTime.Parse(item.V_FormPropertyValue_Value).ToString("yyyy-MM-dd");
                                                    }
                                                    <div class="mulitytext"><label>@item.F_FormProperty_showName</label><input id="formproperty_@item.V_FormPropertyValue_Code" name="formproperty_@item.V_FormPropertyValue_Code" type="text" @htmlAttributes value="@propertyTime"><i></i></div>
                                                    break;
                                                      case 135://日期时间框
                                                    htmlAttributes += "date=date ";
                                                    if (!String.IsNullOrEmpty(item.V_FormPropertyValue_Value))
                                                    {
                                                        propertyTime = DateTime.Parse(item.V_FormPropertyValue_Value).ToString("yyyy-MM-dd HH:mm:ss");
                                                    }
                                                    <div class="mulitytext"><label>@item.F_FormProperty_showName</label><input id="formproperty_@item.V_FormPropertyValue_Code" name="formproperty_@item.V_FormPropertyValue_Code" dateformat="yyyy-MM-dd HH:mm:ss" type="text" @htmlAttributes value="@propertyTime"><i></i></div>
                                                    break;
                                                      case 136://单选弹出框
                                                    <div class="mulitytext"><label>@item.F_FormProperty_showName</label>@{Html.RenderAction("GenerateSingleCallbackRefList", new { formPropertyValue = @item, htmlAttributes = @htmlAttributes });}<i></i></div>
                                                    break;
                                                      case 137://多选弹出框
                                                    <div class="mulitytext"><label>@item.F_FormProperty_showName</label>@{Html.RenderAction("GenerateMulityCallbackRefList", new { formPropertyValue = @item, htmlAttributes = @htmlAttributes });}<i></i></div>
                                                    break;
                                                      case 138://单选弹出树
                                                    <div class="mulitytext"><label>@item.F_FormProperty_showName</label>@{Html.RenderAction("GenerateSingleCallbackRefTree", new { formPropertyValue = @item, htmlAttributes = @htmlAttributes });}<i></i></div>
                                                    break;
                                                  }
                                              }
    }
</ul>
<div class="tabAdd"><span style="cursor:default;">个性化操作</span><i style="margin-left:90px;font-style:normal; " class="warmPrompt">温馨提示：被保全人来源于诉讼保全裁定任务表单中的被保全人，如果您还没有完成"诉讼保全裁定"任务，再来进行"保全"任务额！</i></div>
<table style="width:100%;">
    <tbody>
        <tr>
            <td>被保全人</td>
            <td>
                @{
                    MvcHtmlString mvcBbqrHtmlStr = Html.Action("GenerateIndividDropDownHtmls", "SecurityForm", new { area = "IndividuationForm", formCode = fFormCode, formPropertyCode = "4F29C5F6-8F5D-46E2-B393-0CA7B081B938", businessFlowFormCode = businessFlowFormCode });
                    string bbqrHtmlcontent = mvcBbqrHtmlStr.ToString();//这里表单属性变量"formPropertyCode"的值，采用写死的原则(对应这个表单"被保全人"的任意一属性)
                }
                <select id="virtualField_bBqr" name="virtualField_bBqr" onchange="changeBbqr()">
                    <option value="-2">全部</option>
                    @Html.Raw(bbqrHtmlcontent)
                </select>
            </td>
            <td>资产类型</td>
            <td>
                <select id="virtualField_assetsType" name="virtualField_assetsType" onchange="changeZc()">
                    <option value="-2">全部</option>
                    @foreach (var group in itemGourp)
                    {
                        <option value="@group.F_FormProperty_code">@group.F_FormProperty_showName</option>
                    }
                </select>
            </td>
            <td></td>
        </tr>
    </tbody>
</table>
<div class="tabAdd" style="height:0px;"></div>
@foreach (var group in itemGourp)
{
    <div tablegroup="tablegroup" style="display:none;" id="table_container_@group.F_FormProperty_code">
        <div class="tabAdd"><span><a id="table_addbutton_@group.F_FormProperty_id" create_before_triggerevent="checkIsSelectBbqr()" create_after_triggerevent="setDefaultBbqr($tr)">新增@(group.F_FormProperty_showName)</a></span></div>
        <table class="tablelist tableedit" id="table_@group.F_FormProperty_id" relationbutton="table_addbutton_@group.F_FormProperty_id">
            <thead>
                <tr>
                    @{
    var groupItems = Model.Where(p => p.F_FormProperty_parent == group.F_FormProperty_code);
                    }
                    @foreach (var groupItem in groupItems)
                    {
                        name = String.Empty;
                        htmlAttributes = String.Empty;
                        htmlcontent = String.Empty;
                        propertyTime = String.Empty;

                        name = "items_" + group.F_FormProperty_code + "_index_" + groupItem.F_FormProperty_fieldName + "_" + groupItem.F_FormProperty_code;
                        if (!groupItem.F_FormProperty_isShow)
                        {
                            <th class="hide" uitype="hid" name="@name">@groupItem.F_FormProperty_showName</th>
                            continue;
                        }

                        if (groupItem.F_FormProperty_isRequire)
                        {
                            htmlAttributes += "requiredInput=请输入" + groupItem.F_FormProperty_showName + "！ ";
                        }
                        if (groupItem.F_FormProperty_isOnlyRead)
                        {//UI控件只读
                            if (groupItem.F_FormProperty_uiType.Value == 133)
                            {
                                htmlAttributes += "disabled=disabled ";
                            }
                            else
                            {
                                htmlAttributes += "readonly=readonly ";
                            }
                        }
                        //处理其它验证
                        string otherValidateStr = groupItem.F_FormProperty_validationMessage;
                        if (!String.IsNullOrEmpty(otherValidateStr))
                        {
                            string[] validateMessageGroup = otherValidateStr.Split('|');
                            for (int i = 0; i < validateMessageGroup.Length; i++)
                            {
                                htmlAttributes += validateMessageGroup[i].Replace("\"", "") + " ";//替换验证信息中存在的双引号
                            }
                        }
                        htmlAttributes += "maxlength=" + groupItem.F_FormProperty_fieldLength + " ";
                        switch (groupItem.F_FormProperty_uiType.Value)
                        {
                            case 133://下拉框
                                if (groupItem.F_FormProperty_code.Value.ToString().ToUpper() == "70870A7B-49E9-43C2-8DB4-74AF5A8911B0" ||
                                    groupItem.F_FormProperty_code.Value.ToString().ToUpper() == "73B89A2F-8A6B-4352-8864-1905B9EDA4C0" ||
                                    groupItem.F_FormProperty_code.Value.ToString().ToUpper() == "B30EEA1A-4EDE-4DEA-8799-CF637C6DECD7" ||
                                    groupItem.F_FormProperty_code.Value.ToString().ToUpper() == "58A5D479-D990-432D-BB11-BDECF16AE528" ||
                                    groupItem.F_FormProperty_code.Value.ToString().ToUpper() == "0F019B9F-B572-4017-96F7-9F1055E6B893" ||
                                    groupItem.F_FormProperty_code.Value.ToString().ToUpper() == "20466A0E-BC62-4960-86BE-3F33DC9FD50D" ||
                                    groupItem.F_FormProperty_code.Value.ToString().ToUpper() == "0D2068AC-47C5-4896-8415-C351FEF3A6E0" ||
                                    groupItem.F_FormProperty_code.Value.ToString().ToUpper() == "11B8E15D-3F3E-486F-A4A7-901F02F0BC2B" ||
                                    groupItem.F_FormProperty_code.Value.ToString().ToUpper() == "4F29C5F6-8F5D-46E2-B393-0CA7B081B938" ||
                                    groupItem.F_FormProperty_code.Value.ToString().ToUpper() == "E1737140-AD97-4B00-B463-D284F9623BCB")
                                {
                                    @*MvcHtmlString mvcBbqrStr = Html.Action("GenerateTableEditListDropDownHtmls", new { formPropertyValue = @groupItem });
                                        htmlcontent = mvcBbqrStr.ToString();
                                        //如果下拉列表为"被保全人"的时候，需要做特殊处理
                                        <th bbqr="bbqr" uitype="@groupItem.F_FormProperty_uiType" name="@name" htmlattributes="@htmlAttributes" htmlcontent="@htmlcontent">@groupItem.F_FormProperty_showName</th>
                                        continue;*@
                                    htmlAttributes += "bbqr=bbqr ";
                                }
                                //处理默认保全方式
                                if (group.F_FormProperty_code.Value.ToString().ToUpper() == "6AAF6865-053E-4A4F-A3D1-6899C3E6B752" ||
                                    group.F_FormProperty_code.Value.ToString().ToUpper() == "EE1AEF4B-7FB6-4C98-A7D5-1DF76796BFC3" ||
                                    group.F_FormProperty_code.Value.ToString().ToUpper() == "E0ED0DA3-3958-4916-BA93-2C62C5592D2F" ||
                                    group.F_FormProperty_code.Value.ToString().ToUpper() == "CE6FFAE4-7718-4ED4-B1E4-7E01726CE1B4" ||
                                    group.F_FormProperty_code.Value.ToString().ToUpper() == "A1E9F96C-D25C-4823-8703-F391FDD74876")
                                {//默认为协助保全
                                    if (groupItem.F_FormProperty_dataSource_conditionValue == "592")
                                    {//只可以应用到保全方式下拉框
                                        groupItem.V_FormPropertyValue_Value = Convert.ToInt32(SecurityMethodEnum.协助保全).ToString();
                                    }
                                }
                                else if (group.F_FormProperty_code.Value.ToString().ToUpper() == "776E67F0-7E1E-4A3C-9D6A-8D0AFFEB807A" ||
                                    group.F_FormProperty_code.Value.ToString().ToUpper() == "33256732-AF1E-42E6-BB4A-913C14C647DD" ||
                                    group.F_FormProperty_code.Value.ToString().ToUpper() == "8B5B4517-84B6-463F-A255-563835B10A98" ||
                                    group.F_FormProperty_code.Value.ToString().ToUpper() == "253188DB-E86A-482A-A6EC-F5A5BF896CCA" ||
                                    group.F_FormProperty_code.Value.ToString().ToUpper() == "8179AF0F-A10F-4C85-9789-F856EF61C1A0")
                                {//默认为直接保全
                                    if (groupItem.F_FormProperty_dataSource_conditionValue == "592")
                                    {//只可以应用到保全方式下拉框
                                        groupItem.V_FormPropertyValue_Value = Convert.ToInt32(SecurityMethodEnum.直接保全).ToString();
                                    }
                                }
                                MvcHtmlString mvcHtmlStr = Html.Action("GenerateTableEditListDropDownHtmls", new { formPropertyValue = @groupItem });
                                htmlcontent = mvcHtmlStr.ToString();
                                //如果下拉列表为"被保全人"的时候，需要做特殊处理
                                break;
                        }
                        <th uitype="@groupItem.F_FormProperty_uiType" name="@name" htmlattributes="@htmlAttributes" htmlcontent="@htmlcontent">@groupItem.F_FormProperty_showName</th>
                    }
                    <th uitype="del">操作</th>
                </tr>
            </thead>
            <tbody>
                @for (int j = 0; j < DynamicItemFormPropertyValues.Tables.Count; j++)
                {//这个地方的业务逻辑都为处理加载列表表单属性值
                    DataTable dt = DynamicItemFormPropertyValues.Tables[j];
                    bool isThisTable = false;//是否为普通子表属性关联table
                    int columnCount = 0;//table 列数量
                    foreach (var groupItem in groupItems)
                    {
                        if (dt.Columns.Contains(groupItem.F_FormProperty_code.Value.ToString().ToUpper()))
                        {
                            isThisTable = true;
                            columnCount = dt.Columns.Count;
                            break;
                        }
                    }
                    if (isThisTable)
                    {
                        int rowIndex = 0;//行索引号
                        foreach (DataRow dr in dt.Rows)
                        {
                            <tr>
                                @foreach (var groupItem in groupItems)
                                {
                                    relname = String.Empty;
                                    name = String.Empty;

                                    htmlAttributes = String.Empty;
                                    htmlcontent = String.Empty;
                                    propertyId = String.Empty;
                                    propertyValue = String.Empty;
                                    tempPropertyValue = String.Empty;

                                    tempPropertyValue = dr[groupItem.F_FormProperty_code.Value.ToString().ToUpper()].ToString();
                                    if (!String.IsNullOrEmpty(tempPropertyValue))
                                    {
                                        if (tempPropertyValue.Substring(0, 1) == "[")
                                        {
                                            tempPropertyValue = tempPropertyValue.Substring(1, tempPropertyValue.Length - 1);
                                            int charIndex = tempPropertyValue.IndexOf(']');
                                            propertyId = tempPropertyValue.Substring(0, charIndex);
                                            propertyValue = tempPropertyValue.Substring(charIndex + 1, tempPropertyValue.Length - charIndex - 1);
                                        }
                                    }

                                    name = "items_" + group.F_FormProperty_code + "_" + rowIndex + "_" + groupItem.F_FormProperty_fieldName + "_" + groupItem.F_FormProperty_code + "_" + propertyId;
                                    relname = "items_" + group.F_FormProperty_code + "_index_" + groupItem.F_FormProperty_fieldName + "_" + groupItem.F_FormProperty_code + "_" + propertyId;
                                    if (!groupItem.F_FormProperty_isShow)
                                    {
                                        <td class="hide"><input type="hidden" name="@name" relname="@relname" value="@propertyValue" /></td>
                                        continue;
                                    }

                                    if (groupItem.F_FormProperty_isRequire)
                                    {
                                        htmlAttributes += "requiredInput=请输入" + groupItem.F_FormProperty_showName + "！ ";
                                    }
                                    if (groupItem.F_FormProperty_isOnlyRead)
                                    {//UI控件只读
                                        if (groupItem.F_FormProperty_uiType.Value == 133)
                                        {//下拉只读
                                            htmlAttributes += "disabled=disabled ";
                                        }
                                        else
                                        {
                                            htmlAttributes += "readonly=readonly ";
                                        }
                                    }
                                    //处理其它验证
                                    string otherValidateStr = groupItem.F_FormProperty_validationMessage;
                                    if (!String.IsNullOrEmpty(otherValidateStr))
                                    {
                                        string[] validateMessageGroup = otherValidateStr.Split('|');
                                        for (int i = 0; i < validateMessageGroup.Length; i++)
                                        {
                                            htmlAttributes += validateMessageGroup[i].Replace("\"", "") + " ";//替换验证信息中存在的双引号
                                        }
                                    }
                                    htmlAttributes += "maxlength=" + groupItem.F_FormProperty_fieldLength + " ";

                                    switch (groupItem.F_FormProperty_uiType.Value)
                                    {
                                        case 129://单行文本框
                                            <td>
                                                <div class="itemtext"><input type="text" name="@name" relname="@relname" value="@propertyValue" @htmlAttributes><i></i></div>
                                            </td>
                                            break;
                                        case 130://多行文本框
                                        <td>
                                            <div class="itemtext"><textarea rows="2" cols="20" name="@name" relname="@relname" @htmlAttributes>@propertyValue</textarea><i></i></div>
                                        </td>
                                            break;
                                        case 131://单选框

                                            break;
                                        case 132://复选框

                                            break;
                                        case 133://下拉框
                                            groupItem.V_FormPropertyValue_Value = propertyValue;
                                            MvcHtmlString mvcHtmlStr = Html.Action("GenerateTableEditListDropDownHtmls", new { formPropertyValue = @groupItem });
                                            htmlcontent = mvcHtmlStr.ToString();
                                            <td>
                                                <div class="itemtext"><select name="@name" relname="@relname" @htmlAttributes>@Html.Raw(htmlcontent)</select><i></i></div>
                                            </td>
                                            break;
                                        case 134://日期框
                                        <td>
                                            <div class="itemtext"><input type="text" date="date" dateformat="yyyy-MM-dd" name="@name" relname="@relname" value="@propertyValue" @htmlAttributes><i></i></div>
                                        </td>
                                            break;
                                        case 135://日期时间框
                                        <td>
                                            <div class="itemtext"><input type="text" date="date" dateformat="yyyy-MM-dd HH:mm:ss" name="@name" relname="@relname" value="@propertyValue" @htmlAttributes><i></i></div>
                                        </td>
                                            break;
                                    }
                                }
                                <td><a href="javascript:;" class="tablelink"> 删除</a></td>
                            </tr>
                                rowIndex++;
                        }
                    }
                }
            </tbody>
        </table>
    </div>
}
        <ul class="forminfo bt">
            @if (isHasSaveFormPower)
            {
                if (formStatus != Convert.ToInt32(FormStatusEnum.已作废))
                {
                  <div class="buttonWrap clear">
                    <label>&nbsp;</label><input name="" type="button" id="btnSave" onclick="onlySaveForm(this)" class="btn btnmr fl" value="确认保存"><i></i>
                    <label>&nbsp;</label><input name="" type="button" onclick="viewAttachment(this)" class="btn btnmr fl" value="附件信息" title="表单附件" dialogwidth="1200" dialogheight="700" url="/attachmentupload/attachment_defaultlayout?relationCode=@businessFlowFormCode&targetDirectory=@BaseEnumHelper.GetUploadAttachmentFolder(FileBelongTypeEnum.自定义表单)&fileBelongType=@Convert.ToInt32(FileBelongTypeEnum.自定义表单)" /><i></i>
                  </div>
                }
            }
            else
            {
                if (formStatus != Convert.ToInt32(FormStatusEnum.已作废))
                {
                   <div class="buttonWrap clear">
                    <label>&nbsp;</label><input name="" type="button" onclick="viewAttachment(this)" class="btn btnmr fl" value="附件信息" title="表单附件" dialogwidth="1200" dialogheight="700" url="/attachmentupload/attachment_defaultlayout_view?relationCode=@businessFlowFormCode&targetDirectory=@BaseEnumHelper.GetUploadAttachmentFolder(FileBelongTypeEnum.自定义表单)&fileBelongType=@Convert.ToInt32(FileBelongTypeEnum.自定义表单)" /><i></i>
                   </div>
                }
            }
        </ul>
    </form>
    <ul class="forminfo">
        @{Html.RenderAction("GenerateReDoneForm", "FormReDone", new { formUiType = 3, fkType = fkType, pkCode = pkCode, businessFlowCode = businessFlowCode, formCode = fFormCode, businessFlowFormCode = businessFlowFormCode, formStatus = formStatus, isSwitchFormHistoryRecordUrl = isSwitchFormHistoryRecordUrl ? 1 : 0 });}
    </ul>
</div>
<script type="text/javascript" src="/theme/js/tableedit.js"></script>@*加载编辑table js，这个js目前只能放在底部，不可以放在<head>标签里*@