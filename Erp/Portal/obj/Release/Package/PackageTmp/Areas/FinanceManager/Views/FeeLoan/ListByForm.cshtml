@using System.Data;
@using CommonService.Common;
@model IEnumerable<CommonService.Model.CustomerForm.F_FormProperty>
@{
    Layout = "~/Views/Shared/_ListMulityListIframeTemplate.cshtml";//带表单查询的列表页面固定模板
}
@{
    ViewBag.Title = "财务借款列表";
}
@section HeadScript{
    <script type="text/javascript">
        $(function () {
            var $businessflowoperatetoolbar = $(".toolbar");
            //批量操作
            $("a[target=popdialog_owndefine]", $businessflowoperatetoolbar).each(function () {
                $(this).click(function (event) {
                    event.preventDefault();
                    var $this = $(this);
                    //获取多选Guid结合
                    var guids = '';
                    var arrayObj = new Array();
                    var i = 0;
                    var flag = false;
                    var applystatus = false;
                    $("input[type=checkbox]", $(".tablelist").children("tbody")).each(function () {
                        var $checkbox = $(this);
                        if ($checkbox.is(':checked')) {
                            guids += $checkbox.parents('tr').attr('rel') + ',';
                            if (arrayObj.indexOf($checkbox.parents('tr').attr('applypersons')) < 0) {
                                arrayObj[i] = $checkbox.parents('tr').attr('applypersons');
                                i++;
                            }
                            if ($checkbox.parents('tr').attr('state') != "597") {
                                flag = true;
                            }
                            if ($checkbox.parents('tr').attr('applystatus') != "537") {
                                applystatus = true;
                            }
                        }
                    });

                    if (guids != '') {
                        guids = guids.substr(0, guids.length - 1);
                        if (flag) {
                            alertMsg.warn('生成凭证的单据付款状态必须为未付款！');
                            return;
                        }
                        if (applystatus) {
                            alertMsg.warn('生成凭证的单据申请状态必须为已通过！');
                            return;
                        }
                        if (arrayObj.length > 1) {
                            alertMsg.warn('生成凭证的单据申请人只能是一个人！');
                            return;
                        }
                    } else {
                        alertMsg.warn('请选择信息！');
                        return;
                    }
                    var inputDatas = {};//数据格式{'key':'value','key1':'value'}
                    //替换url参数
                    var switchUrl = $this.attr("href").replace("{sid_Iterm}", guids);

                    //替换url参数
                    _openDialog($(this).attr("title"), switchUrl, $(this).attr("dialogwidth"), $(this).attr("dialogheight"));
                });
            });

            $("#allChecked").click(function () {
                if (this.checked) {
                    $(".tablelist :checkbox").prop("checked", true);
                } else {
                    $(".tablelist :checkbox").prop("checked", false);
                }
            });
            $("table.tablelist tr").slice(1).each(function () {//slice(1)表示排除第一行---表头
                var p = this;
                $(this).children().slice(1).click(function () {
                    $($(p).children()[0]).children().each(function () {//$(p).children()[0]表示第一列
                        if (this.type == "checkbox") {
                            if (!this.checked) this.checked = true;
                            else this.checked = false;
                        }
                    });
                });
            });
        })
    </script>
}
@section HeadCss{
    <style type="text/css">
        .mulitytext {
            width: 340px;
        }

            .mulitytext label {
                width: 110px;
            }

            .mulitytext input[type=text] {
                width: 200px;
            }

            .mulitytext input[type=text], select {
                width: 200px;
            }
    </style>
}
@{
    DataSet DynamicItemFormPropertyValues = ViewBag.DynamicItemFormPropertyValues;//动态明细表单属性值
    CommonService.Model.CustomerForm.F_Form formcon = ViewBag.formCon;
}
@{
    var itemGourp = Model.Where(p => p.F_FormProperty_uiType == Convert.ToInt32(UiControlType.普通子表));//明细组(这个自定义列表在此页面功能中实际上只允许有一个明细组，否则会出错)
}
@{
    //查询条件
    string ClientOrParty = ViewBag.ClientOrParty;//委托人/对方当事人
    string FeeReimbursementNumber = ViewBag.FeeReimbursementNumber;//编号
    string CaseNumber = ViewBag.CaseNumber;//案号
    string applyPersonName = ViewBag.applyPersonName;//申请人
    string BusinessFlowCode = ViewBag.Business_flow_code;//阶段
    string PaymentStatus = ViewBag.PaymentStatus;//付款状态
    string CostGenerationTime = ViewBag.CostGenerationTime;//费用产生时间
    string CostGenerationTime1 = ViewBag.CostGenerationTime1;
    string InvoiceTypeId = ViewBag.InvoiceTypeId;//发票种类
}
@{
    //参数
    List<CommonService.Model.C_Parameters> FeeTypes = ViewBag.FeeTypes;
    List<CommonService.Model.C_Parameters> InvoiceType = ViewBag.InvoiceType;
    List<CommonService.Model.C_Parameters> PayStatus = ViewBag.PayStatus;
    List<CommonService.Model.FlowManager.P_Flow> casestage = ViewBag.casestage;
    List<CommonService.Model.CaseManager.B_Case> caseList = ViewBag.caseList;
}


@{
    string propertyValue = String.Empty;//属性值
}

@foreach (var group in itemGourp)
{
    <table class="tablelist">
        <thead>
            <tr>

                @{
    var groupItems = Model.Where(p => p.F_FormProperty_parent == group.F_FormProperty_code);
                }
                @foreach (var groupItem in groupItems)
                {
                    if (groupItem.F_FormProperty_showName == "老ID" || groupItem.F_FormProperty_showName == "分摊案件数")
                    {

                    }
                    else if (groupItem.F_FormProperty_showName == "费用产生日期")
                    {
                        <th width="140px;">@groupItem.F_FormProperty_showName</th>
                    }
                    else
                    {
                        <th>@groupItem.F_FormProperty_showName</th>
                    }
                }
                <th>申请状态</th>

                <th width="70px;">申请人</th>
                <th width="140px;">申请时间</th>
            </tr>
        </thead>
        <tbody>
            @for (int j = 0; j < DynamicItemFormPropertyValues.Tables.Count; j++)
            {//这个地方的业务逻辑都为处理加载列表表单属性值
                DataTable dt = DynamicItemFormPropertyValues.Tables[j];
                bool isThisTable = false;//是否为普通子表属性关联table
                int columnCount = 0;//table 列数量
                foreach (var groupItem in groupItems)
                {
                    if (dt.Columns.Contains(groupItem.F_FormProperty_code.Value.ToString().ToUpper()))
                    {
                        isThisTable = true;
                        columnCount = dt.Columns.Count;
                        break;
                    }
                }
                if (isThisTable)
                {
                    int rowIndex = 0;//行索引号
                    foreach (DataRow dr in dt.Rows)
                    {
                        <tr target="sid_Iterm" rel="@dr["formPropertyValueGroup"].ToString()" applypersons="@dr["O_Form_applyPerson_name"].ToString()" state="@dr["8A8A572F-66FC-4399-9DEB-C3107E085E3C"].ToString()" applystatus="@dr["O_Form_applyStatus"].ToString()">

                            @foreach (var groupItem in groupItems)
                            {
                                propertyValue = dr[groupItem.F_FormProperty_code.Value.ToString().ToUpper()].ToString();
                                switch (groupItem.F_FormProperty_uiType.Value)
                                {
                                    case 133://下拉框
                                        if (!String.IsNullOrEmpty(groupItem.F_FormProperty_dataSource_conditionValue))
                                        {
                                            if (Convert.ToInt32(CustomerFormEnum.费用种类) == Convert.ToInt32(groupItem.F_FormProperty_dataSource_conditionValue))
                                            {
                                                var feeType = FeeTypes.Where(c => c.C_Parameters_id.ToString() == propertyValue).FirstOrDefault();
                                                if (feeType != null)
                                                {
                                                    <td>@feeType.C_Parameters_name</td>
                                                }
                                                else
                                                {
                                                    <td></td>
                                                }
                                            }
                                            else if (Convert.ToInt32(CustomerFormEnum.付款状态) == Convert.ToInt32(groupItem.F_FormProperty_dataSource_conditionValue))
                                            {
                                                var payStatus = PayStatus.Where(c => c.C_Parameters_id.ToString() == propertyValue).FirstOrDefault();
                                                if (payStatus != null)
                                                {
                                                    if (payStatus.C_Parameters_id == 597)
                                                    {
                                                        <td style="color:#808080">@payStatus.C_Parameters_name</td>
                                                    }
                                                    else
                                                    {
                                                        <td>@payStatus.C_Parameters_name</td>
                                                    }
                                                }
                                                else
                                                {
                                                    <td></td>
                                                }
                                            }
                                            else
                                            {
                                                <td></td>
                                            }
                                        }
                                        else
                                        {
                                            <td></td>
                                        }
                                        break;
                                    case 682://联动下拉框
                                        var invoiceType = InvoiceType.Where(c => c.C_Parameters_id.ToString() == propertyValue).FirstOrDefault();
                                        if (invoiceType != null)
                                        {
                                            <td>@invoiceType.C_Parameters_name</td>
                                        }
                                        else
                                        {
                                            <td></td>
                                        }
                                        break;
                                    default:
                                        if (groupItem.F_FormProperty_showName == "老ID" || groupItem.F_FormProperty_showName == "分摊案件数")
                                        {

                                        }
                                        else
                                        {
                                            if (groupItem.F_FormProperty_showName == "发票金额" || groupItem.F_FormProperty_showName == "分摊金额")
                                            {
                                                <td>@(propertyValue == "" ? propertyValue : Convert.ToDecimal(propertyValue).ToString("0.00"))</td>
                                            }
                                            else
                                            {
                                                <td>@propertyValue</td>
                                            }
                                        }
                                        break;
                                }
                            }
                            <td>@dr["O_Form_applyStatus_name"].ToString()</td>
                            <td>@dr["O_Form_applyPerson_name"].ToString()</td>
                            <td>@dr["O_Form_applyTime"].ToString()</td>
                        </tr>
                            rowIndex++;
                    }
                }
            }
        </tbody>
    </table>
}